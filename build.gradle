plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'pmd'
}

group = 'com.sample'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    enabled(false)
}

bootJar {
    archiveBaseName = 'app'
    archiveFileName = 'app.jar'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

    // Database
    implementation 'com.mysql:mysql-connector-j:9.1.0'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta")
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // JJWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // apache common
    implementation 'org.apache.commons:commons-lang3:3.17.0'
}

// JUnit Platform 사용하도록 설정
test {
    useJUnitPlatform()
}

// 빌드 시 테스트가 실행되지 않도록 설정
tasks.withType(Test).configureEach {
    enabled = false
}

// Checkstyle 설정
checkstyle {
    configFile = file("${rootDir}/config/checkstyle/google-checkstyle.xml")
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/checkstyle-suppressions.xml')]
    ignoreFailures = false
    maxWarnings = 0
    reportsDir = file(project.layout.buildDirectory.dir("checkstyle-output").get().asFile.path)
    toolVersion = '10.20.0'
}

checkstyleMain {
    reports {
        xml.outputLocation = file("${checkstyle.reportsDir}/checkstyle-report.xml")
    }
}

// PMD 설정
pmd {
    ruleSetFiles = files("${rootDir}/config/pmd/custom-ruleset.xml")
    ruleSets = []
    consoleOutput = true
    ignoreFailures = false
    reportsDir = file(project.layout.buildDirectory.dir("pmd-output").get().asFile.path)
    toolVersion = '7.7.0'
}

pmdMain {
    reports {
        xml.outputLocation = file("${pmd.reportsDir}/pmd-report.xml")
        xml.required = true
    }
}
